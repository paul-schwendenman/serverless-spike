service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local

custom:
  queueName: TutorialSQS
  tableName: 'users-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
    usePipenv: true
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource:
        Fn::GetAtt: [ SQSQueue, Arn ]
  environment:
    USERS_TABLE: ${self:custom.tableName}
    SQS_NAME: ${self:custom.queueName}

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    environment:
      SQS_URL:
        Ref: SQSQueue
  getUser:
    handler: wsgi.handler
    events:
      - http: 'GET /users/{proxy+}'
  createUser:
    handler: wsgi.handler
    events:
      - http: 'POST /users'
  start-lambda:
    handler: handler.start
    environment:
      SQS_URL:
        Ref: SQSQueue
  end-lambda:
    handler: handler.end
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ SQSQueue, Arn ]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
